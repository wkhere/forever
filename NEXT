+ elimination of multiple events after one edit

+ event delay configurable via commandline

+ reuse .forever.step but ignore files selection

+ run the program also on start, like forever.sh

+ use rusage or sth to print:
  [0.49s user  0.05s sys  100.61% cpu  0.551s total]
  eg.
  cmd.ProcessState.SysUsage().(*syscall.Rusage) ...


- ability to restart the process (like webserver)

+ by default work on all files and dirs recursively minus
  some defined dirs [.git vendor __pycache__ .mypy_cache deps _build ebin ..etc]
  via filepath.Walk

+ when given dir argument, should chdir to there and try to read .forever.step
  from there

+ print rusage/maxrss only on unix systems
+ switch maxrss to int to support 32b architectures

+ on failed steps, the program is run twice;
+ next program should be only tried if last was not found

+ show timings also on failed runs

+ somehow going to other directory misbehaves
  + chdir first and then add from .

+ improve usage message

- improve readme

+ flags: -d DIR, -v for verbose, -vv for debug (was -d)
  note: since 1291346a -v is debug 

+ regular argument is a command to run
  ~ if args are given, should be run on start, err/exit if not found in a path
    - now forever simply runs the given command on each change;
      a better solution is to check availability of that command once at start
      and do the same for default progs actually
  + if no arg is given, ./.forever.step and make are tried as until now

+ more with regard to the process logic:
  if the process exits with non-zero, should be noted also

+ unify vocabulary: program, not command

+ usage: show default programs

~ walk: ignore dirs on filesystems like /dev, /proc, /sys
  (checking for dev-like files doesn't make sense, as the dirs are walked and
   added, not the files)
  - run `df -P dir`, skip 1st line and look for 1st word - fs type
  - differentiate these fs types by OS
    - for linux, ignore: udev, proc, sysfs

- accept multiple -d dir, or: -d dir1,dir2,...

- die on patho-situations, like: -d /, too many files to watch, ..etc

+ extra: print watched dirs (after recursive walk+add) on some signal
  + print to tmp file 

- consider *not* excluding .git dir

- add metrics

- switch to 1.13 wrapped errors - what? used in some places

+ rss gone wrong on darwin

+ display RSS in more practical MB

+ usage note to use `--` to separate program having its own flags

- allow to run command in different dir than watched dir

+ red output from running the program if it errors, or can't be found

- fix test on windows

+ use filepath.WalkDir - new in 1.16
  - benchmark with eg. GOROOT/src

+ watch loop rewritten to eliminate a number of bugs and corner cases

